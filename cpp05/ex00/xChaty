
// Bureaucrat.hpp

#include <iostream>
#include <exception>

class Bureaucrat {
	private:
		const std::string 	_name;
		int 				_grade;

	public:
		Bureaucrat(); // Constructor por default. Lo exije la forma canonica
		Bureaucrat(const std::string name, int grade); // const parametrizado
		Bureaucrat(const Bureaucrat& obj); // const de copia
		~Bureaucrat();

		Bureaucrat& operator=(const Bureaucrat& obj);

		const std::string& getName() const; 
		int getGrade() const;

		
		void incrementGrade();
		void decrementGrade();

		// Clases de excepciones
    	class GradeTooHighException : public std::exception {
        	public:
            	virtual const char* what() const throw();
    	};

		class GradeTooLowException : public std::exception {
			public:
				virtual const char* what() const throw();
		};
};
/* La declaro fuera de la clase*/ //PORQUE???
/*=======overload "<<" operator definition========*/
std::ostream& operator<<(std::ostream& out, const Bureaucrat& obj);


// Bureaucrat.cpp

#include "Bureaucrat.hpp"

/*Default constructor*/
Bureaucrat::Bureaucrat() : _name("Default"), _grade(42) {}

/* Constructor parametrizado */
Bureaucrat::Bureaucrat(const std::string name, int grade) : _name(name), _grade(grade) {
	if (_grade < 1) //OJO->no se deberia poder instanciar si el parametro _grade esta fuera de rango !!!
		throw GradeTooHighException();
	if (_grade > 150)
		throw GradeTooLowException();
}

/* Constructor de copia */
Bureaucrat::Bureaucrat(const Bureaucrat& obj) : _name(obj._name), _grade(obj._grade) {}

Bureaucrat::~Bureaucrat() {}

Bureaucrat& Bureaucrat::operator=(const Bureaucrat& obj) {
	if (this != &obj) {
	// name es const y no se puede asignar de nuevo
		_grade = obj._grade;
	}
	return *this;
}

const std::string& Bureaucrat::getName() const { return _name; }

int Bureaucrat::getGrade() const { return _grade; }


void Bureaucrat::incrementGrade() {
	if (_grade == 1) //No podra ser menor porque el constructor no permite el fuera de rango
	  	throw GradeTooHighException();
	else
		_grade -= 1;
}

void Bureaucrat::decrementGrade() { 
	 if (_grade == 150) //No podra ser menor porque el constructor lo topara
		throw GradeTooLowException();
	else
		_grade += 1;
}


const char* Bureaucrat::GradeTooHighException::what() const throw() {
	return "Grade is too high!";
}

const char* Bureaucrat::GradeTooLowException::what() const throw() {
	return "Grade is too low!";
}



/*--------------------------out of the Bureaucratic class----------------------------*/

std::ostream& operator<<(std::ostream& out, const Bureaucrat& obj) {
	out << obj.getName() << ", bureaucrat grade " << obj.getGrade() << "." << std::endl;
	return out;
}



// main.cpp

#include <iostream>
#include "Bureaucrat.hpp"


int main() {
    try {

		Bureaucrat a;
		std::cout << a << std::endl;

        Bureaucrat b("Alice", 149);
        std::cout << b << std::endl;

        b.decrementGrade(); 
        std::cout << b << std::endl;

		b.decrementGrade();  
      	std::cout << b << std::endl;

        // Intento de crear un burócrata con grade inválido
        Bureaucrat b2("Bob", 151);  // Esto lanzará GradeTooLowException
    }
    catch (std::exception &e) {
        std::cerr << "Exception caught: " << e.what() << std::endl;
    }
    return 0;
}
